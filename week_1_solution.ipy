{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPFKdYxH3QX6TR0KkY4RQc8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Arewa Data Science Academy\n","\n","Deep Learning Cohort1.0\n","\n","Name: Faridah Yusuf\n","\n","Email: waziriphareeyda@gmail.com\n","\n","Title: Week 1 Solution\n","\n"],"metadata":{"id":"bU4rSlug0Tol"}},{"cell_type":"markdown","source":["00. PyTorch Fundamentals Exercises\n","1. Documentation reading\n","A big part of deep learning (and learning to code in general) is getting familiar with the documentation of a certain framework you're using. We'll be using the PyTorch documentation a lot throughout the rest of this course. So I'd recommend spending 10-minutes reading the following (it's okay if you don't get some things for now, the focus is not yet full understanding, it's awareness):\n","\n","The documentation on torch.Tensor.\n","\n","The documentation on torch.cuda."],"metadata":{"id":"XSauCfCK6Uwr"}},{"cell_type":"code","source":["# No code solution (reading)\n",""],"metadata":{"id":"VCPDXTUM6ZBK"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qQCc1nBPyWkO","executionInfo":{"status":"ok","timestamp":1703521800588,"user_tz":-60,"elapsed":416,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"6a11cdf4-05a8-4c09-90c5-fec345589d1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.1.0+cu121\n"]}],"source":["import torch\n","print(f\"{torch.__version__}\")"]},{"cell_type":"markdown","source":["2. Create a random tensor with shape (7, 7)"],"metadata":{"id":"4PEERe5C2ChF"}},{"cell_type":"code","source":["# Import torch\n","import torch\n","\n","# Create random tensor\n","X = torch.rand(size=(7, 7))\n","X, X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JuUM4uPP2MJb","executionInfo":{"status":"ok","timestamp":1703522436200,"user_tz":-60,"elapsed":575,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"9f6ac0c7-63b1-4a61-d873-5c27cadbdfff"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.2980, 0.3485, 0.9847, 0.9499, 0.9621, 0.7884, 0.5086],\n","         [0.4229, 0.8029, 0.5999, 0.2744, 0.1389, 0.3946, 0.5763],\n","         [0.8451, 0.0234, 0.4073, 0.4275, 0.0913, 0.2658, 0.5071],\n","         [0.6721, 0.5194, 0.8978, 0.1860, 0.4533, 0.1099, 0.5576],\n","         [0.0632, 0.0526, 0.2354, 0.8267, 0.7251, 0.6905, 0.7266],\n","         [0.2987, 0.8268, 0.6544, 0.1141, 0.9391, 0.4230, 0.9762],\n","         [0.0845, 0.3467, 0.3120, 0.8425, 0.6085, 0.1181, 0.4716]]),\n"," torch.Size([7, 7]))"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["3. Perform a matrix multiplication on the tensor from 2 with another random tensor with shape (1, 7) (hint: you may have to transpose the second tensor)."],"metadata":{"id":"lKYsB60M3DPT"}},{"cell_type":"code","source":["# Create another random tensor\n","Y = torch.rand(size=(1,7))\n","Z = torch.matmul(X, Y.T)\n","# Perform matrix multiplication\n","Z, Z.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4hOt2fd6pVC","executionInfo":{"status":"ok","timestamp":1703524361856,"user_tz":-60,"elapsed":1393,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"d9d01547-4564-4d9e-bb9f-96146a0af984"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[2.8589],\n","         [1.7846],\n","         [1.5516],\n","         [2.1366],\n","         [1.6074],\n","         [2.3903],\n","         [1.2142]]),\n"," torch.Size([7, 1]))"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["4. Set the random seed to 0 and do 2 & 3 over again."],"metadata":{"id":"bH-dq2it6-Oy"}},{"cell_type":"code","source":["# Set manual seed\n","torch.manual_seed(0)\n","\n","# Create two random tensors\n","X = torch.rand(size=(7,7))\n","Y = torch.rand(size=(1,7))\n","\n","# Matrix multiply tensors\n","Z = torch.matmul(X, Y.T)\n","Z, Z.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HEACh0mh6_3l","executionInfo":{"status":"ok","timestamp":1703524473786,"user_tz":-60,"elapsed":980,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"6687cc57-e0f6-46d7-9363-fb589a6fff38"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[1.8542],\n","         [1.9611],\n","         [2.2884],\n","         [3.0481],\n","         [1.7067],\n","         [2.5290],\n","         [1.7989]]),\n"," torch.Size([7, 1]))"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["5. Speaking of random seeds, we saw how to set it with torch.manual_seed() but is there a GPU equivalent? (hint: you'll need to look into the documentation for torch.cuda for this one)\n","\n","If there is, set the GPU random seed to 1234."],"metadata":{"id":"T3Y-X20j7Asd"}},{"cell_type":"code","source":["# Set random seed on the GPU\n","torch.cuda.manual_seed(1234)"],"metadata":{"id":"Ss1sqqyX7Gy2","executionInfo":{"status":"ok","timestamp":1703524520113,"user_tz":-60,"elapsed":402,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["6. Create two random tensors of shape (2, 3) and send them both to the GPU (you'll need access to a GPU for this). Set torch.manual_seed(1234) when creating the tensors (this doesn't have to be the GPU random seed). The output should be something like:"],"metadata":{"id":"8pXg7Tci7Hnf"}},{"cell_type":"code","source":["# Set random seed\n","torch.manual_seed(1234)\n","# Check for access to GPU\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","# Create two random tensors on GPU\n","TENSOR_A = torch.rand(size=(2,3)).to(device)\n","TENSOR_B = torch.rand(size=(2,3)).to(device)\n","print(f\"Device: {device}\")\n","TENSOR_A,TENSOR_B"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M9UTzBxU7M09","executionInfo":{"status":"ok","timestamp":1703524550792,"user_tz":-60,"elapsed":424,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"5cd2c82f-abd7-40c4-91fd-daef8a7e4cfa"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Device: cpu\n"]},{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.0290, 0.4019, 0.2598],\n","         [0.3666, 0.0583, 0.7006]]),\n"," tensor([[0.0518, 0.4681, 0.6738],\n","         [0.3315, 0.7837, 0.5631]]))"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["7. Perform a matrix multiplication on the tensors you created in 6 (again, you may have to adjust the shapes of one of the tensors).\n","The output should look like:\n","\n","(tensor([[0.3647, 0.4709],\n","         [0.5184, 0.5617]], device='cuda:0'), torch.Size([2, 2]))"],"metadata":{"id":"WXtG9BG07Ngd"}},{"cell_type":"code","source":["# Perform matmul on tensor_A and tensor_B\n","TENSOR_C = torch.matmul(TENSOR_A, TENSOR_B.T)\n","TENSOR_C , TENSOR_C.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MID_eBYL7S8l","executionInfo":{"status":"ok","timestamp":1703524655183,"user_tz":-60,"elapsed":391,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"d798f2cd-9582-4622-8521-5d57274a4e46"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.3647, 0.4709],\n","         [0.5184, 0.5617]]),\n"," torch.Size([2, 2]))"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["8. Find the maximum and minimum values of the output of 7."],"metadata":{"id":"CM2Vqqk17TuO"}},{"cell_type":"code","source":["# Find min and max\n","TENSOR_C.max(),TENSOR_C.min()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oLaCaqBd7XM-","executionInfo":{"status":"ok","timestamp":1703524687811,"user_tz":-60,"elapsed":398,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"be9059d7-4ebe-40a3-84c3-83b2805cba2a"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor(0.5617), tensor(0.3647))"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["9. Find the maximum and minimum index values of the output of 7."],"metadata":{"id":"TYn-hjK27Xo2"}},{"cell_type":"code","source":["# Find arg max and Find arg min\n","\n","\n","TENSOR_C.argmin(), TENSOR_C.argmax()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oiVvn5av7bZP","executionInfo":{"status":"ok","timestamp":1703524772774,"user_tz":-60,"elapsed":423,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"834d2dc2-6674-4445-d42a-4b521031bd50"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor(0), tensor(3))"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["10. Make a random tensor with shape (1, 1, 1, 10) and then create a new tensor with all the 1 dimensions removed to be left with a tensor of shape (10). Set the seed to 7 when you create it and print out the first tensor and it's shape as well as the second tensor and it's shape.\n","The output should look like:\n","\n","tensor([[[[0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297,\n","           0.3653, 0.8513]]]]) torch.Size([1, 1, 1, 10])\n","tensor([0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297, 0.3653,\n","        0.8513]) torch.Size([10])\n"],"metadata":{"id":"er3hCUcQ7bso"}},{"cell_type":"code","source":["\n","# Set seed\n","\n","torch.manual_seed(7)\n","# Create random tensor\n","D = torch.rand(size = (1,1,1,10))\n","\n","# Remove single dimensions\n","E = D.squeeze()\n","\n","# Print out tensors and their shapes\n","print(D, D.shape)\n","print(E, E.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TA75MnGx7hhQ","executionInfo":{"status":"ok","timestamp":1703524915222,"user_tz":-60,"elapsed":407,"user":{"displayName":"waziri phareeyda","userId":"03785689611648139156"}},"outputId":"096ef455-189a-4e89-b5a4-dc2bdeddb791"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[[0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297,\n","           0.3653, 0.8513]]]]) torch.Size([1, 1, 1, 10])\n","tensor([0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297, 0.3653,\n","        0.8513]) torch.Size([10])\n"]}]}]}